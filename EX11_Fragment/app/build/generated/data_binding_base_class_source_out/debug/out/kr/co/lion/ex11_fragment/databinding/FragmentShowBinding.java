// Generated by view binder compiler. Do not edit!
package kr.co.lion.ex11_fragment.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.appbar.MaterialToolbar;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import kr.co.lion.ex11_fragment.R;

public final class FragmentShowBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final MaterialToolbar materialToolbar;

  @NonNull
  public final TextView textViewAge;

  @NonNull
  public final TextView textViewEng;

  @NonNull
  public final TextView textViewKor;

  @NonNull
  public final TextView textViewMath;

  @NonNull
  public final TextView textViewName;

  private FragmentShowBinding(@NonNull LinearLayout rootView,
      @NonNull MaterialToolbar materialToolbar, @NonNull TextView textViewAge,
      @NonNull TextView textViewEng, @NonNull TextView textViewKor, @NonNull TextView textViewMath,
      @NonNull TextView textViewName) {
    this.rootView = rootView;
    this.materialToolbar = materialToolbar;
    this.textViewAge = textViewAge;
    this.textViewEng = textViewEng;
    this.textViewKor = textViewKor;
    this.textViewMath = textViewMath;
    this.textViewName = textViewName;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentShowBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentShowBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_show, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentShowBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.materialToolbar;
      MaterialToolbar materialToolbar = ViewBindings.findChildViewById(rootView, id);
      if (materialToolbar == null) {
        break missingId;
      }

      id = R.id.textViewAge;
      TextView textViewAge = ViewBindings.findChildViewById(rootView, id);
      if (textViewAge == null) {
        break missingId;
      }

      id = R.id.textViewEng;
      TextView textViewEng = ViewBindings.findChildViewById(rootView, id);
      if (textViewEng == null) {
        break missingId;
      }

      id = R.id.textViewKor;
      TextView textViewKor = ViewBindings.findChildViewById(rootView, id);
      if (textViewKor == null) {
        break missingId;
      }

      id = R.id.textViewMath;
      TextView textViewMath = ViewBindings.findChildViewById(rootView, id);
      if (textViewMath == null) {
        break missingId;
      }

      id = R.id.textViewName;
      TextView textViewName = ViewBindings.findChildViewById(rootView, id);
      if (textViewName == null) {
        break missingId;
      }

      return new FragmentShowBinding((LinearLayout) rootView, materialToolbar, textViewAge,
          textViewEng, textViewKor, textViewMath, textViewName);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
